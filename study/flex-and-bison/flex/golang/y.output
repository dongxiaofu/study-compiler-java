Nonterminals useless in grammar

    calclist
    factor
    term


Terminals unused in grammar

    ADD
    SUB
    MUL
    DIV
    ABS
    OP
    CP
    COMMENT


Rules useless in parser due to conflicts

   10 func: %empty

   22 variable: %empty

   26 stmt: %empty

   50 number: %empty


State 0 conflicts: 2 shift/reduce, 18 reduce/reduce
State 2 conflicts: 3 shift/reduce, 45 reduce/reduce
State 4 conflicts: 12 reduce/reduce
State 5 conflicts: 12 reduce/reduce
State 15 conflicts: 4 shift/reduce, 18 reduce/reduce
State 16 conflicts: 5 shift/reduce
State 22 conflicts: 1 shift/reduce, 3 reduce/reduce
State 24 conflicts: 4 shift/reduce, 18 reduce/reduce
State 25 conflicts: 3 shift/reduce, 32 reduce/reduce
State 26 conflicts: 3 shift/reduce, 32 reduce/reduce
State 27 conflicts: 3 shift/reduce, 32 reduce/reduce
State 28 conflicts: 3 shift/reduce, 32 reduce/reduce
State 29 conflicts: 3 shift/reduce, 32 reduce/reduce
State 31 conflicts: 1 shift/reduce
State 37 conflicts: 5 shift/reduce
State 38 conflicts: 5 shift/reduce
State 39 conflicts: 5 shift/reduce
State 40 conflicts: 5 shift/reduce
State 41 conflicts: 5 shift/reduce
State 42 conflicts: 1 shift/reduce, 3 reduce/reduce
State 44 conflicts: 12 reduce/reduce
State 50 conflicts: 12 reduce/reduce
State 53 conflicts: 2 shift/reduce, 4 reduce/reduce
State 54 conflicts: 1 shift/reduce, 3 reduce/reduce
State 58 conflicts: 12 reduce/reduce
State 59 conflicts: 1 shift/reduce, 3 reduce/reduce
State 61 conflicts: 5 shift/reduce, 44 reduce/reduce
State 67 conflicts: 5 shift/reduce, 42 reduce/reduce
State 68 conflicts: 2 shift/reduce, 5 reduce/reduce
State 69 conflicts: 5 shift/reduce, 44 reduce/reduce
State 70 conflicts: 1 shift/reduce, 3 reduce/reduce
State 73 conflicts: 2 shift/reduce, 4 reduce/reduce


Grammar

    0 $accept: compilation_unit $end

    1 compilation_unit: %empty
    2                 | test EOL
    3                 | func EOL
    4                 | stmt

    5 test: %empty
    6     | tparam ',' test
    7     | tparam

    8 tparam: %empty
    9       | identifier identifier

   10 func: %empty
   11     | identifier identifier '(' params ')' block

   12 params: %empty
   13       | param ',' params
   14       | param

   15 param: %empty
   16      | identifier identifier

   17 block: %empty
   18      | variables stmts block
   19      | '{' variables stmts block '}'

   20 variables: %empty
   21          | variable ';' variables

   22 variable: %empty
   23         | identifier identifier

   24 stmts: %empty
   25      | stmt stmts

   26 stmt: %empty
   27     | then
   28     | IF con then
   29     | IF con then EOL
   30     | IF con then ELSE else_body EOL

   31 con: %empty
   32    | expr

   33 then: %empty
   34     | expr ';' then
   35     | '{' expr ';' '}'

   36 else_body: %empty
   37          | expr ';' else_body
   38          | '{' expr ';' '}'

   39 expr: %empty
   40     | expr '+' expr
   41     | expr '-' expr
   42     | expr '*' expr
   43     | expr '/' expr
   44     | expr '=' expr
   45     | '(' expr ')'
   46     | identifier
   47     | number

   48 identifier: %empty
   49           | IDENTIFIER

   50 number: %empty
   51       | NUMBER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 11 45
    ')' (41) 11 45
    '*' (42) 42
    '+' (43) 40
    ',' (44) 6 13
    '-' (45) 41
    '/' (47) 43
    ';' (59) 21 34 35 37 38
    '=' (61) 44
    '{' (123) 19 35 38
    '}' (125) 19 35 38
    error (256)
    NUMBER <intval> (258) 51
    ADD <strval> (259)
    SUB <strval> (260)
    MUL <strval> (261)
    DIV <strval> (262)
    ABS <strval> (263)
    EOL <strval> (264) 2 3 29 30
    OP (265)
    CP (266)
    IF <strval> (267) 28 29 30
    ELSE <strval> (268) 30
    COMMENT (269)
    IDENTIFIER <strval> (270) 49


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    compilation_unit <node> (28)
        on left: 1 2 3 4
        on right: 0
    test <strval> (29)
        on left: 5 6 7
        on right: 2 6
    tparam <strval> (30)
        on left: 8 9
        on right: 6 7
    func <node> (31)
        on left: 10 11
        on right: 3
    params <pn> (32)
        on left: 12 13 14
        on right: 11 13
    param <node> (33)
        on left: 15 16
        on right: 13 14
    block <node> (34)
        on left: 17 18 19
        on right: 11 18 19
    variables <fvn> (35)
        on left: 20 21
        on right: 18 19 21
    variable <node> (36)
        on left: 22 23
        on right: 21
    stmts <fsn> (37)
        on left: 24 25
        on right: 18 19 25
    stmt <node> (38)
        on left: 26 27 28 29 30
        on right: 4 25
    con <node> (39)
        on left: 31 32
        on right: 28 29 30
    then <node> (40)
        on left: 33 34 35
        on right: 27 28 29 30 34
    else_body <node> (41)
        on left: 36 37 38
        on right: 30 37
    expr <node> (42)
        on left: 39 40 41 42 43 44 45 46 47
        on right: 32 34 35 37 38 40 41 42 43 44 45
    identifier <node> (43)
        on left: 48 49
        on right: 9 11 16 23 46
    number <node> (44)
        on left: 50 51
        on right: 47


State 0

    0 $accept: • compilation_unit $end

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    $end        reduce using rule 1 (compilation_unit)
    $end        [reduce using rule 26 (stmt)]
    $end        [reduce using rule 33 (then)]
    EOL         reduce using rule 5 (test)
    EOL         [reduce using rule 8 (tparam)]
    EOL         [reduce using rule 10 (func)]
    EOL         [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    ','         reduce using rule 8 (tparam)
    ','         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 48 (identifier)]
    ';'         reduce using rule 39 (expr)
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 39 (expr)
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 39 (expr)
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 39 (expr)
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 39 (expr)
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 39 (expr)
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 39 (expr)

    compilation_unit  go to state 6
    test              go to state 7
    tparam            go to state 8
    func              go to state 9
    stmt              go to state 10
    then              go to state 11
    expr              go to state 12
    identifier        go to state 13
    number            go to state 14


State 1

   51 number: NUMBER •

    $default  reduce using rule 51 (number)


State 2

   28 stmt: IF • con then
   29     | IF • con then EOL
   30     | IF • con then ELSE else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 31 (con)
    $end        [reduce using rule 39 (expr)]
    $end        [reduce using rule 48 (identifier)]
    $end        [reduce using rule 50 (number)]
    NUMBER      [reduce using rule 31 (con)]
    NUMBER      [reduce using rule 39 (expr)]
    NUMBER      [reduce using rule 48 (identifier)]
    NUMBER      [reduce using rule 50 (number)]
    EOL         reduce using rule 31 (con)
    EOL         [reduce using rule 39 (expr)]
    EOL         [reduce using rule 48 (identifier)]
    EOL         [reduce using rule 50 (number)]
    IF          reduce using rule 31 (con)
    IF          [reduce using rule 39 (expr)]
    IF          [reduce using rule 48 (identifier)]
    IF          [reduce using rule 50 (number)]
    ELSE        reduce using rule 31 (con)
    ELSE        [reduce using rule 39 (expr)]
    ELSE        [reduce using rule 48 (identifier)]
    ELSE        [reduce using rule 50 (number)]
    IDENTIFIER  [reduce using rule 31 (con)]
    IDENTIFIER  [reduce using rule 39 (expr)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 50 (number)]
    '('         [reduce using rule 31 (con)]
    '('         [reduce using rule 39 (expr)]
    '('         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 50 (number)]
    '{'         reduce using rule 31 (con)
    '{'         [reduce using rule 39 (expr)]
    '{'         [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 50 (number)]
    '}'         reduce using rule 31 (con)
    '}'         [reduce using rule 39 (expr)]
    '}'         [reduce using rule 48 (identifier)]
    '}'         [reduce using rule 50 (number)]
    ';'         reduce using rule 31 (con)
    ';'         [reduce using rule 39 (expr)]
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 31 (con)
    '+'         [reduce using rule 39 (expr)]
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 31 (con)
    '-'         [reduce using rule 39 (expr)]
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 31 (con)
    '*'         [reduce using rule 39 (expr)]
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 31 (con)
    '/'         [reduce using rule 39 (expr)]
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 31 (con)
    '='         [reduce using rule 39 (expr)]
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 31 (con)

    con         go to state 15
    expr        go to state 16
    identifier  go to state 17
    number      go to state 14


State 3

   49 identifier: IDENTIFIER •

    $default  reduce using rule 49 (identifier)


State 4

   45 expr: '(' • expr ')'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    ')'       reduce using rule 39 (expr)
    ')'       [reduce using rule 48 (identifier)]
    ')'       [reduce using rule 50 (number)]
    '+'       reduce using rule 39 (expr)
    '+'       [reduce using rule 48 (identifier)]
    '+'       [reduce using rule 50 (number)]
    '-'       reduce using rule 39 (expr)
    '-'       [reduce using rule 48 (identifier)]
    '-'       [reduce using rule 50 (number)]
    '*'       reduce using rule 39 (expr)
    '*'       [reduce using rule 48 (identifier)]
    '*'       [reduce using rule 50 (number)]
    '/'       reduce using rule 39 (expr)
    '/'       [reduce using rule 48 (identifier)]
    '/'       [reduce using rule 50 (number)]
    '='       reduce using rule 39 (expr)
    '='       [reduce using rule 48 (identifier)]
    '='       [reduce using rule 50 (number)]
    $default  reduce using rule 39 (expr)

    expr        go to state 18
    identifier  go to state 17
    number      go to state 14


State 5

   35 then: '{' • expr ';' '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    ';'       reduce using rule 39 (expr)
    ';'       [reduce using rule 48 (identifier)]
    ';'       [reduce using rule 50 (number)]
    '+'       reduce using rule 39 (expr)
    '+'       [reduce using rule 48 (identifier)]
    '+'       [reduce using rule 50 (number)]
    '-'       reduce using rule 39 (expr)
    '-'       [reduce using rule 48 (identifier)]
    '-'       [reduce using rule 50 (number)]
    '*'       reduce using rule 39 (expr)
    '*'       [reduce using rule 48 (identifier)]
    '*'       [reduce using rule 50 (number)]
    '/'       reduce using rule 39 (expr)
    '/'       [reduce using rule 48 (identifier)]
    '/'       [reduce using rule 50 (number)]
    '='       reduce using rule 39 (expr)
    '='       [reduce using rule 48 (identifier)]
    '='       [reduce using rule 50 (number)]
    $default  reduce using rule 39 (expr)

    expr        go to state 19
    identifier  go to state 17
    number      go to state 14


State 6

    0 $accept: compilation_unit • $end

    $end  shift, and go to state 20


State 7

    2 compilation_unit: test • EOL

    EOL  shift, and go to state 21


State 8

    6 test: tparam • ',' test
    7     | tparam •

    ','  shift, and go to state 22

    $default  reduce using rule 7 (test)


State 9

    3 compilation_unit: func • EOL

    EOL  shift, and go to state 23


State 10

    4 compilation_unit: stmt •

    $default  reduce using rule 4 (compilation_unit)


State 11

   27 stmt: then •

    $default  reduce using rule 27 (stmt)


State 12

   34 then: expr • ';' then
   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    ';'  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29


State 13

    9 tparam: identifier • identifier
   11 func: identifier • identifier '(' params ')' block
   46 expr: identifier •

    IDENTIFIER  shift, and go to state 3

    EOL       reduce using rule 48 (identifier)
    ','       reduce using rule 48 (identifier)
    '('       reduce using rule 48 (identifier)
    $default  reduce using rule 46 (expr)

    identifier  go to state 30


State 14

   47 expr: number •

    $default  reduce using rule 47 (expr)


State 15

   28 stmt: IF con • then
   29     | IF con • then EOL
   30     | IF con • then ELSE else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 33 (then)]
    IDENTIFIER  [reduce using rule 33 (then)]
    '('         [reduce using rule 33 (then)]
    '{'         [reduce using rule 33 (then)]
    ';'         reduce using rule 33 (then)
    ';'         [reduce using rule 39 (expr)]
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 33 (then)
    '+'         [reduce using rule 39 (expr)]
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 33 (then)
    '-'         [reduce using rule 39 (expr)]
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 33 (then)
    '*'         [reduce using rule 39 (expr)]
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 33 (then)
    '/'         [reduce using rule 39 (expr)]
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 33 (then)
    '='         [reduce using rule 39 (expr)]
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 33 (then)

    then        go to state 31
    expr        go to state 12
    identifier  go to state 17
    number      go to state 14


State 16

   32 con: expr •
   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29

    '+'       [reduce using rule 32 (con)]
    '-'       [reduce using rule 32 (con)]
    '*'       [reduce using rule 32 (con)]
    '/'       [reduce using rule 32 (con)]
    '='       [reduce using rule 32 (con)]
    $default  reduce using rule 32 (con)


State 17

   46 expr: identifier •

    $default  reduce using rule 46 (expr)


State 18

   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr
   45     | '(' expr • ')'

    ')'  shift, and go to state 32
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29


State 19

   35 then: '{' expr • ';' '}'
   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    ';'  shift, and go to state 33
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29


State 20

    0 $accept: compilation_unit $end •

    $default  accept


State 21

    2 compilation_unit: test EOL •

    $default  reduce using rule 2 (compilation_unit)


State 22

    6 test: tparam ',' • test

    IDENTIFIER  shift, and go to state 3

    EOL         reduce using rule 5 (test)
    EOL         [reduce using rule 8 (tparam)]
    EOL         [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    ','         reduce using rule 8 (tparam)
    ','         [reduce using rule 48 (identifier)]
    $default    reduce using rule 5 (test)

    test        go to state 34
    tparam      go to state 8
    identifier  go to state 35


State 23

    3 compilation_unit: func EOL •

    $default  reduce using rule 3 (compilation_unit)


State 24

   34 then: expr ';' • then

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 33 (then)]
    IDENTIFIER  [reduce using rule 33 (then)]
    '('         [reduce using rule 33 (then)]
    '{'         [reduce using rule 33 (then)]
    ';'         reduce using rule 33 (then)
    ';'         [reduce using rule 39 (expr)]
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 33 (then)
    '+'         [reduce using rule 39 (expr)]
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 33 (then)
    '-'         [reduce using rule 39 (expr)]
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 33 (then)
    '*'         [reduce using rule 39 (expr)]
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 33 (then)
    '/'         [reduce using rule 39 (expr)]
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 33 (then)
    '='         [reduce using rule 39 (expr)]
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 33 (then)

    then        go to state 36
    expr        go to state 12
    identifier  go to state 17
    number      go to state 14


State 25

   40 expr: expr '+' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 39 (expr)
    $end        [reduce using rule 48 (identifier)]
    $end        [reduce using rule 50 (number)]
    NUMBER      [reduce using rule 39 (expr)]
    NUMBER      [reduce using rule 48 (identifier)]
    NUMBER      [reduce using rule 50 (number)]
    EOL         reduce using rule 39 (expr)
    EOL         [reduce using rule 48 (identifier)]
    EOL         [reduce using rule 50 (number)]
    IF          reduce using rule 39 (expr)
    IF          [reduce using rule 48 (identifier)]
    IF          [reduce using rule 50 (number)]
    ELSE        reduce using rule 39 (expr)
    ELSE        [reduce using rule 48 (identifier)]
    ELSE        [reduce using rule 50 (number)]
    IDENTIFIER  [reduce using rule 39 (expr)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 50 (number)]
    '('         [reduce using rule 39 (expr)]
    '('         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 50 (number)]
    ')'         reduce using rule 39 (expr)
    ')'         [reduce using rule 48 (identifier)]
    ')'         [reduce using rule 50 (number)]
    '{'         reduce using rule 39 (expr)
    '{'         [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 50 (number)]
    '}'         reduce using rule 39 (expr)
    '}'         [reduce using rule 48 (identifier)]
    '}'         [reduce using rule 50 (number)]
    ';'         reduce using rule 39 (expr)
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 39 (expr)
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 39 (expr)
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 39 (expr)
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 39 (expr)
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 39 (expr)
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 39 (expr)

    expr        go to state 37
    identifier  go to state 17
    number      go to state 14


State 26

   41 expr: expr '-' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 39 (expr)
    $end        [reduce using rule 48 (identifier)]
    $end        [reduce using rule 50 (number)]
    NUMBER      [reduce using rule 39 (expr)]
    NUMBER      [reduce using rule 48 (identifier)]
    NUMBER      [reduce using rule 50 (number)]
    EOL         reduce using rule 39 (expr)
    EOL         [reduce using rule 48 (identifier)]
    EOL         [reduce using rule 50 (number)]
    IF          reduce using rule 39 (expr)
    IF          [reduce using rule 48 (identifier)]
    IF          [reduce using rule 50 (number)]
    ELSE        reduce using rule 39 (expr)
    ELSE        [reduce using rule 48 (identifier)]
    ELSE        [reduce using rule 50 (number)]
    IDENTIFIER  [reduce using rule 39 (expr)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 50 (number)]
    '('         [reduce using rule 39 (expr)]
    '('         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 50 (number)]
    ')'         reduce using rule 39 (expr)
    ')'         [reduce using rule 48 (identifier)]
    ')'         [reduce using rule 50 (number)]
    '{'         reduce using rule 39 (expr)
    '{'         [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 50 (number)]
    '}'         reduce using rule 39 (expr)
    '}'         [reduce using rule 48 (identifier)]
    '}'         [reduce using rule 50 (number)]
    ';'         reduce using rule 39 (expr)
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 39 (expr)
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 39 (expr)
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 39 (expr)
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 39 (expr)
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 39 (expr)
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 39 (expr)

    expr        go to state 38
    identifier  go to state 17
    number      go to state 14


State 27

   42 expr: expr '*' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 39 (expr)
    $end        [reduce using rule 48 (identifier)]
    $end        [reduce using rule 50 (number)]
    NUMBER      [reduce using rule 39 (expr)]
    NUMBER      [reduce using rule 48 (identifier)]
    NUMBER      [reduce using rule 50 (number)]
    EOL         reduce using rule 39 (expr)
    EOL         [reduce using rule 48 (identifier)]
    EOL         [reduce using rule 50 (number)]
    IF          reduce using rule 39 (expr)
    IF          [reduce using rule 48 (identifier)]
    IF          [reduce using rule 50 (number)]
    ELSE        reduce using rule 39 (expr)
    ELSE        [reduce using rule 48 (identifier)]
    ELSE        [reduce using rule 50 (number)]
    IDENTIFIER  [reduce using rule 39 (expr)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 50 (number)]
    '('         [reduce using rule 39 (expr)]
    '('         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 50 (number)]
    ')'         reduce using rule 39 (expr)
    ')'         [reduce using rule 48 (identifier)]
    ')'         [reduce using rule 50 (number)]
    '{'         reduce using rule 39 (expr)
    '{'         [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 50 (number)]
    '}'         reduce using rule 39 (expr)
    '}'         [reduce using rule 48 (identifier)]
    '}'         [reduce using rule 50 (number)]
    ';'         reduce using rule 39 (expr)
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 39 (expr)
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 39 (expr)
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 39 (expr)
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 39 (expr)
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 39 (expr)
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 39 (expr)

    expr        go to state 39
    identifier  go to state 17
    number      go to state 14


State 28

   43 expr: expr '/' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 39 (expr)
    $end        [reduce using rule 48 (identifier)]
    $end        [reduce using rule 50 (number)]
    NUMBER      [reduce using rule 39 (expr)]
    NUMBER      [reduce using rule 48 (identifier)]
    NUMBER      [reduce using rule 50 (number)]
    EOL         reduce using rule 39 (expr)
    EOL         [reduce using rule 48 (identifier)]
    EOL         [reduce using rule 50 (number)]
    IF          reduce using rule 39 (expr)
    IF          [reduce using rule 48 (identifier)]
    IF          [reduce using rule 50 (number)]
    ELSE        reduce using rule 39 (expr)
    ELSE        [reduce using rule 48 (identifier)]
    ELSE        [reduce using rule 50 (number)]
    IDENTIFIER  [reduce using rule 39 (expr)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 50 (number)]
    '('         [reduce using rule 39 (expr)]
    '('         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 50 (number)]
    ')'         reduce using rule 39 (expr)
    ')'         [reduce using rule 48 (identifier)]
    ')'         [reduce using rule 50 (number)]
    '{'         reduce using rule 39 (expr)
    '{'         [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 50 (number)]
    '}'         reduce using rule 39 (expr)
    '}'         [reduce using rule 48 (identifier)]
    '}'         [reduce using rule 50 (number)]
    ';'         reduce using rule 39 (expr)
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 39 (expr)
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 39 (expr)
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 39 (expr)
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 39 (expr)
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 39 (expr)
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 39 (expr)

    expr        go to state 40
    identifier  go to state 17
    number      go to state 14


State 29

   44 expr: expr '=' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 39 (expr)
    $end        [reduce using rule 48 (identifier)]
    $end        [reduce using rule 50 (number)]
    NUMBER      [reduce using rule 39 (expr)]
    NUMBER      [reduce using rule 48 (identifier)]
    NUMBER      [reduce using rule 50 (number)]
    EOL         reduce using rule 39 (expr)
    EOL         [reduce using rule 48 (identifier)]
    EOL         [reduce using rule 50 (number)]
    IF          reduce using rule 39 (expr)
    IF          [reduce using rule 48 (identifier)]
    IF          [reduce using rule 50 (number)]
    ELSE        reduce using rule 39 (expr)
    ELSE        [reduce using rule 48 (identifier)]
    ELSE        [reduce using rule 50 (number)]
    IDENTIFIER  [reduce using rule 39 (expr)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    IDENTIFIER  [reduce using rule 50 (number)]
    '('         [reduce using rule 39 (expr)]
    '('         [reduce using rule 48 (identifier)]
    '('         [reduce using rule 50 (number)]
    ')'         reduce using rule 39 (expr)
    ')'         [reduce using rule 48 (identifier)]
    ')'         [reduce using rule 50 (number)]
    '{'         reduce using rule 39 (expr)
    '{'         [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 50 (number)]
    '}'         reduce using rule 39 (expr)
    '}'         [reduce using rule 48 (identifier)]
    '}'         [reduce using rule 50 (number)]
    ';'         reduce using rule 39 (expr)
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 39 (expr)
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 39 (expr)
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 39 (expr)
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 39 (expr)
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 39 (expr)
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 39 (expr)

    expr        go to state 41
    identifier  go to state 17
    number      go to state 14


State 30

    9 tparam: identifier identifier •
   11 func: identifier identifier • '(' params ')' block

    '('  shift, and go to state 42

    $default  reduce using rule 9 (tparam)


State 31

   28 stmt: IF con then •
   29     | IF con then • EOL
   30     | IF con then • ELSE else_body EOL

    EOL   shift, and go to state 43
    ELSE  shift, and go to state 44

    EOL       [reduce using rule 28 (stmt)]
    $default  reduce using rule 28 (stmt)


State 32

   45 expr: '(' expr ')' •

    $default  reduce using rule 45 (expr)


State 33

   35 then: '{' expr ';' • '}'

    '}'  shift, and go to state 45


State 34

    6 test: tparam ',' test •

    $default  reduce using rule 6 (test)


State 35

    9 tparam: identifier • identifier

    IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 48 (identifier)

    identifier  go to state 46


State 36

   34 then: expr ';' then •

    $default  reduce using rule 34 (then)


State 37

   40 expr: expr • '+' expr
   40     | expr '+' expr •
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29

    '+'       [reduce using rule 40 (expr)]
    '-'       [reduce using rule 40 (expr)]
    '*'       [reduce using rule 40 (expr)]
    '/'       [reduce using rule 40 (expr)]
    '='       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)


State 38

   40 expr: expr • '+' expr
   41     | expr • '-' expr
   41     | expr '-' expr •
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29

    '+'       [reduce using rule 41 (expr)]
    '-'       [reduce using rule 41 (expr)]
    '*'       [reduce using rule 41 (expr)]
    '/'       [reduce using rule 41 (expr)]
    '='       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)


State 39

   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   42     | expr '*' expr •
   43     | expr • '/' expr
   44     | expr • '=' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29

    '+'       [reduce using rule 42 (expr)]
    '-'       [reduce using rule 42 (expr)]
    '*'       [reduce using rule 42 (expr)]
    '/'       [reduce using rule 42 (expr)]
    '='       [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)


State 40

   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   43     | expr '/' expr •
   44     | expr • '=' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29

    '+'       [reduce using rule 43 (expr)]
    '-'       [reduce using rule 43 (expr)]
    '*'       [reduce using rule 43 (expr)]
    '/'       [reduce using rule 43 (expr)]
    '='       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


State 41

   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr
   44     | expr '=' expr •

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29

    '+'       [reduce using rule 44 (expr)]
    '-'       [reduce using rule 44 (expr)]
    '*'       [reduce using rule 44 (expr)]
    '/'       [reduce using rule 44 (expr)]
    '='       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)


State 42

   11 func: identifier identifier '(' • params ')' block

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 48 (identifier)]
    ','         reduce using rule 15 (param)
    ','         [reduce using rule 48 (identifier)]
    ')'         reduce using rule 12 (params)
    ')'         [reduce using rule 15 (param)]
    ')'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 12 (params)

    params      go to state 47
    param       go to state 48
    identifier  go to state 49


State 43

   29 stmt: IF con then EOL •

    $default  reduce using rule 29 (stmt)


State 44

   30 stmt: IF con then ELSE • else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 50

    EOL       reduce using rule 36 (else_body)
    ';'       reduce using rule 39 (expr)
    ';'       [reduce using rule 48 (identifier)]
    ';'       [reduce using rule 50 (number)]
    '+'       reduce using rule 39 (expr)
    '+'       [reduce using rule 48 (identifier)]
    '+'       [reduce using rule 50 (number)]
    '-'       reduce using rule 39 (expr)
    '-'       [reduce using rule 48 (identifier)]
    '-'       [reduce using rule 50 (number)]
    '*'       reduce using rule 39 (expr)
    '*'       [reduce using rule 48 (identifier)]
    '*'       [reduce using rule 50 (number)]
    '/'       reduce using rule 39 (expr)
    '/'       [reduce using rule 48 (identifier)]
    '/'       [reduce using rule 50 (number)]
    '='       reduce using rule 39 (expr)
    '='       [reduce using rule 48 (identifier)]
    '='       [reduce using rule 50 (number)]
    $default  reduce using rule 39 (expr)

    else_body   go to state 51
    expr        go to state 52
    identifier  go to state 17
    number      go to state 14


State 45

   35 then: '{' expr ';' '}' •

    $default  reduce using rule 35 (then)


State 46

    9 tparam: identifier identifier •

    $default  reduce using rule 9 (tparam)


State 47

   11 func: identifier identifier '(' params • ')' block

    ')'  shift, and go to state 53


State 48

   13 params: param • ',' params
   14       | param •

    ','  shift, and go to state 54

    $default  reduce using rule 14 (params)


State 49

   16 param: identifier • identifier

    IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 48 (identifier)

    identifier  go to state 55


State 50

   38 else_body: '{' • expr ';' '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    ';'       reduce using rule 39 (expr)
    ';'       [reduce using rule 48 (identifier)]
    ';'       [reduce using rule 50 (number)]
    '+'       reduce using rule 39 (expr)
    '+'       [reduce using rule 48 (identifier)]
    '+'       [reduce using rule 50 (number)]
    '-'       reduce using rule 39 (expr)
    '-'       [reduce using rule 48 (identifier)]
    '-'       [reduce using rule 50 (number)]
    '*'       reduce using rule 39 (expr)
    '*'       [reduce using rule 48 (identifier)]
    '*'       [reduce using rule 50 (number)]
    '/'       reduce using rule 39 (expr)
    '/'       [reduce using rule 48 (identifier)]
    '/'       [reduce using rule 50 (number)]
    '='       reduce using rule 39 (expr)
    '='       [reduce using rule 48 (identifier)]
    '='       [reduce using rule 50 (number)]
    $default  reduce using rule 39 (expr)

    expr        go to state 56
    identifier  go to state 17
    number      go to state 14


State 51

   30 stmt: IF con then ELSE else_body • EOL

    EOL  shift, and go to state 57


State 52

   37 else_body: expr • ';' else_body
   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    ';'  shift, and go to state 58
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29


State 53

   11 func: identifier identifier '(' params ')' • block

    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 59

    EOL         reduce using rule 17 (block)
    EOL         [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 20 (variables)]
    ';'         reduce using rule 20 (variables)
    ';'         [reduce using rule 22 (variable)]
    ';'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 20 (variables)

    block       go to state 60
    variables   go to state 61
    variable    go to state 62
    identifier  go to state 63


State 54

   13 params: param ',' • params

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 48 (identifier)]
    ','         reduce using rule 15 (param)
    ','         [reduce using rule 48 (identifier)]
    ')'         reduce using rule 12 (params)
    ')'         [reduce using rule 15 (param)]
    ')'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 12 (params)

    params      go to state 64
    param       go to state 48
    identifier  go to state 49


State 55

   16 param: identifier identifier •

    $default  reduce using rule 16 (param)


State 56

   38 else_body: '{' expr • ';' '}'
   40 expr: expr • '+' expr
   41     | expr • '-' expr
   42     | expr • '*' expr
   43     | expr • '/' expr
   44     | expr • '=' expr

    ';'  shift, and go to state 65
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '='  shift, and go to state 29


State 57

   30 stmt: IF con then ELSE else_body EOL •

    $default  reduce using rule 30 (stmt)


State 58

   37 else_body: expr ';' • else_body

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 50

    EOL       reduce using rule 36 (else_body)
    ';'       reduce using rule 39 (expr)
    ';'       [reduce using rule 48 (identifier)]
    ';'       [reduce using rule 50 (number)]
    '+'       reduce using rule 39 (expr)
    '+'       [reduce using rule 48 (identifier)]
    '+'       [reduce using rule 50 (number)]
    '-'       reduce using rule 39 (expr)
    '-'       [reduce using rule 48 (identifier)]
    '-'       [reduce using rule 50 (number)]
    '*'       reduce using rule 39 (expr)
    '*'       [reduce using rule 48 (identifier)]
    '*'       [reduce using rule 50 (number)]
    '/'       reduce using rule 39 (expr)
    '/'       [reduce using rule 48 (identifier)]
    '/'       [reduce using rule 50 (number)]
    '='       reduce using rule 39 (expr)
    '='       [reduce using rule 48 (identifier)]
    '='       [reduce using rule 50 (number)]
    $default  reduce using rule 39 (expr)

    else_body   go to state 66
    expr        go to state 52
    identifier  go to state 17
    number      go to state 14


State 59

   19 block: '{' • variables stmts block '}'

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    ';'         reduce using rule 20 (variables)
    ';'         [reduce using rule 22 (variable)]
    ';'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 20 (variables)

    variables   go to state 67
    variable    go to state 62
    identifier  go to state 63


State 60

   11 func: identifier identifier '(' params ')' block •

    $default  reduce using rule 11 (func)


State 61

   18 block: variables • stmts block

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 24 (stmts)]
    NUMBER      [reduce using rule 26 (stmt)]
    NUMBER      [reduce using rule 33 (then)]
    EOL         reduce using rule 24 (stmts)
    EOL         [reduce using rule 26 (stmt)]
    EOL         [reduce using rule 33 (then)]
    IF          [reduce using rule 24 (stmts)]
    IF          [reduce using rule 26 (stmt)]
    IF          [reduce using rule 33 (then)]
    IDENTIFIER  [reduce using rule 24 (stmts)]
    IDENTIFIER  [reduce using rule 26 (stmt)]
    IDENTIFIER  [reduce using rule 33 (then)]
    '('         [reduce using rule 24 (stmts)]
    '('         [reduce using rule 26 (stmt)]
    '('         [reduce using rule 33 (then)]
    '{'         [reduce using rule 24 (stmts)]
    '{'         [reduce using rule 26 (stmt)]
    '{'         [reduce using rule 33 (then)]
    '}'         reduce using rule 24 (stmts)
    '}'         [reduce using rule 26 (stmt)]
    '}'         [reduce using rule 33 (then)]
    ';'         reduce using rule 24 (stmts)
    ';'         [reduce using rule 26 (stmt)]
    ';'         [reduce using rule 33 (then)]
    ';'         [reduce using rule 39 (expr)]
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 24 (stmts)
    '+'         [reduce using rule 26 (stmt)]
    '+'         [reduce using rule 33 (then)]
    '+'         [reduce using rule 39 (expr)]
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 24 (stmts)
    '-'         [reduce using rule 26 (stmt)]
    '-'         [reduce using rule 33 (then)]
    '-'         [reduce using rule 39 (expr)]
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 24 (stmts)
    '*'         [reduce using rule 26 (stmt)]
    '*'         [reduce using rule 33 (then)]
    '*'         [reduce using rule 39 (expr)]
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 24 (stmts)
    '/'         [reduce using rule 26 (stmt)]
    '/'         [reduce using rule 33 (then)]
    '/'         [reduce using rule 39 (expr)]
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 24 (stmts)
    '='         [reduce using rule 26 (stmt)]
    '='         [reduce using rule 33 (then)]
    '='         [reduce using rule 39 (expr)]
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 24 (stmts)

    stmts       go to state 68
    stmt        go to state 69
    then        go to state 11
    expr        go to state 12
    identifier  go to state 17
    number      go to state 14


State 62

   21 variables: variable • ';' variables

    ';'  shift, and go to state 70


State 63

   23 variable: identifier • identifier

    IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 48 (identifier)

    identifier  go to state 71


State 64

   13 params: param ',' params •

    $default  reduce using rule 13 (params)


State 65

   38 else_body: '{' expr ';' • '}'

    '}'  shift, and go to state 72


State 66

   37 else_body: expr ';' else_body •

    $default  reduce using rule 37 (else_body)


State 67

   19 block: '{' variables • stmts block '}'

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 24 (stmts)]
    NUMBER      [reduce using rule 26 (stmt)]
    NUMBER      [reduce using rule 33 (then)]
    IF          [reduce using rule 24 (stmts)]
    IF          [reduce using rule 26 (stmt)]
    IF          [reduce using rule 33 (then)]
    IDENTIFIER  [reduce using rule 24 (stmts)]
    IDENTIFIER  [reduce using rule 26 (stmt)]
    IDENTIFIER  [reduce using rule 33 (then)]
    '('         [reduce using rule 24 (stmts)]
    '('         [reduce using rule 26 (stmt)]
    '('         [reduce using rule 33 (then)]
    '{'         [reduce using rule 24 (stmts)]
    '{'         [reduce using rule 26 (stmt)]
    '{'         [reduce using rule 33 (then)]
    '}'         reduce using rule 24 (stmts)
    '}'         [reduce using rule 26 (stmt)]
    '}'         [reduce using rule 33 (then)]
    ';'         reduce using rule 24 (stmts)
    ';'         [reduce using rule 26 (stmt)]
    ';'         [reduce using rule 33 (then)]
    ';'         [reduce using rule 39 (expr)]
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 24 (stmts)
    '+'         [reduce using rule 26 (stmt)]
    '+'         [reduce using rule 33 (then)]
    '+'         [reduce using rule 39 (expr)]
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 24 (stmts)
    '-'         [reduce using rule 26 (stmt)]
    '-'         [reduce using rule 33 (then)]
    '-'         [reduce using rule 39 (expr)]
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 24 (stmts)
    '*'         [reduce using rule 26 (stmt)]
    '*'         [reduce using rule 33 (then)]
    '*'         [reduce using rule 39 (expr)]
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 24 (stmts)
    '/'         [reduce using rule 26 (stmt)]
    '/'         [reduce using rule 33 (then)]
    '/'         [reduce using rule 39 (expr)]
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 24 (stmts)
    '='         [reduce using rule 26 (stmt)]
    '='         [reduce using rule 33 (then)]
    '='         [reduce using rule 39 (expr)]
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 24 (stmts)

    stmts       go to state 73
    stmt        go to state 69
    then        go to state 11
    expr        go to state 12
    identifier  go to state 17
    number      go to state 14


State 68

   18 block: variables stmts • block

    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 59

    EOL         reduce using rule 17 (block)
    EOL         [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 20 (variables)]
    '}'         reduce using rule 17 (block)
    '}'         [reduce using rule 20 (variables)]
    ';'         reduce using rule 20 (variables)
    ';'         [reduce using rule 22 (variable)]
    ';'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 20 (variables)

    block       go to state 74
    variables   go to state 61
    variable    go to state 62
    identifier  go to state 63


State 69

   25 stmts: stmt • stmts

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 24 (stmts)]
    NUMBER      [reduce using rule 26 (stmt)]
    NUMBER      [reduce using rule 33 (then)]
    EOL         reduce using rule 24 (stmts)
    EOL         [reduce using rule 26 (stmt)]
    EOL         [reduce using rule 33 (then)]
    IF          [reduce using rule 24 (stmts)]
    IF          [reduce using rule 26 (stmt)]
    IF          [reduce using rule 33 (then)]
    IDENTIFIER  [reduce using rule 24 (stmts)]
    IDENTIFIER  [reduce using rule 26 (stmt)]
    IDENTIFIER  [reduce using rule 33 (then)]
    '('         [reduce using rule 24 (stmts)]
    '('         [reduce using rule 26 (stmt)]
    '('         [reduce using rule 33 (then)]
    '{'         [reduce using rule 24 (stmts)]
    '{'         [reduce using rule 26 (stmt)]
    '{'         [reduce using rule 33 (then)]
    '}'         reduce using rule 24 (stmts)
    '}'         [reduce using rule 26 (stmt)]
    '}'         [reduce using rule 33 (then)]
    ';'         reduce using rule 24 (stmts)
    ';'         [reduce using rule 26 (stmt)]
    ';'         [reduce using rule 33 (then)]
    ';'         [reduce using rule 39 (expr)]
    ';'         [reduce using rule 48 (identifier)]
    ';'         [reduce using rule 50 (number)]
    '+'         reduce using rule 24 (stmts)
    '+'         [reduce using rule 26 (stmt)]
    '+'         [reduce using rule 33 (then)]
    '+'         [reduce using rule 39 (expr)]
    '+'         [reduce using rule 48 (identifier)]
    '+'         [reduce using rule 50 (number)]
    '-'         reduce using rule 24 (stmts)
    '-'         [reduce using rule 26 (stmt)]
    '-'         [reduce using rule 33 (then)]
    '-'         [reduce using rule 39 (expr)]
    '-'         [reduce using rule 48 (identifier)]
    '-'         [reduce using rule 50 (number)]
    '*'         reduce using rule 24 (stmts)
    '*'         [reduce using rule 26 (stmt)]
    '*'         [reduce using rule 33 (then)]
    '*'         [reduce using rule 39 (expr)]
    '*'         [reduce using rule 48 (identifier)]
    '*'         [reduce using rule 50 (number)]
    '/'         reduce using rule 24 (stmts)
    '/'         [reduce using rule 26 (stmt)]
    '/'         [reduce using rule 33 (then)]
    '/'         [reduce using rule 39 (expr)]
    '/'         [reduce using rule 48 (identifier)]
    '/'         [reduce using rule 50 (number)]
    '='         reduce using rule 24 (stmts)
    '='         [reduce using rule 26 (stmt)]
    '='         [reduce using rule 33 (then)]
    '='         [reduce using rule 39 (expr)]
    '='         [reduce using rule 48 (identifier)]
    '='         [reduce using rule 50 (number)]
    $default    reduce using rule 24 (stmts)

    stmts       go to state 75
    stmt        go to state 69
    then        go to state 11
    expr        go to state 12
    identifier  go to state 17
    number      go to state 14


State 70

   21 variables: variable ';' • variables

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    ';'         reduce using rule 20 (variables)
    ';'         [reduce using rule 22 (variable)]
    ';'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 20 (variables)

    variables   go to state 76
    variable    go to state 62
    identifier  go to state 63


State 71

   23 variable: identifier identifier •

    $default  reduce using rule 23 (variable)


State 72

   38 else_body: '{' expr ';' '}' •

    $default  reduce using rule 38 (else_body)


State 73

   19 block: '{' variables stmts • block '}'

    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 59

    IDENTIFIER  [reduce using rule 20 (variables)]
    IDENTIFIER  [reduce using rule 48 (identifier)]
    '{'         [reduce using rule 20 (variables)]
    '}'         reduce using rule 17 (block)
    '}'         [reduce using rule 20 (variables)]
    ';'         reduce using rule 20 (variables)
    ';'         [reduce using rule 22 (variable)]
    ';'         [reduce using rule 48 (identifier)]
    $default    reduce using rule 20 (variables)

    block       go to state 77
    variables   go to state 61
    variable    go to state 62
    identifier  go to state 63


State 74

   18 block: variables stmts block •

    $default  reduce using rule 18 (block)


State 75

   25 stmts: stmt stmts •

    $default  reduce using rule 25 (stmts)


State 76

   21 variables: variable ';' variables •

    $default  reduce using rule 21 (variables)


State 77

   19 block: '{' variables stmts block • '}'

    '}'  shift, and go to state 78


State 78

   19 block: '{' variables stmts block '}' •

    $default  reduce using rule 19 (block)
