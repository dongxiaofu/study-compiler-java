Nonterminals useless in grammar

    calclist
    factor
    term


Terminals unused in grammar

    ADD
    SUB
    MUL
    DIV
    ABS
    OP
    CP
    COMMENT


Rules useless in parser due to conflicts

   16 variable: %empty

   20 stmt: %empty

   44 number: %empty


State 0 conflicts: 2 shift/reduce, 14 reduce/reduce
State 2 conflicts: 3 shift/reduce, 45 reduce/reduce
State 4 conflicts: 12 reduce/reduce
State 5 conflicts: 12 reduce/reduce
State 13 conflicts: 4 shift/reduce, 18 reduce/reduce
State 14 conflicts: 5 shift/reduce
State 20 conflicts: 4 shift/reduce, 18 reduce/reduce
State 21 conflicts: 3 shift/reduce, 32 reduce/reduce
State 22 conflicts: 3 shift/reduce, 32 reduce/reduce
State 23 conflicts: 3 shift/reduce, 32 reduce/reduce
State 24 conflicts: 3 shift/reduce, 32 reduce/reduce
State 25 conflicts: 3 shift/reduce, 32 reduce/reduce
State 27 conflicts: 1 shift/reduce
State 31 conflicts: 5 shift/reduce
State 32 conflicts: 5 shift/reduce
State 33 conflicts: 5 shift/reduce
State 34 conflicts: 5 shift/reduce
State 35 conflicts: 5 shift/reduce
State 36 conflicts: 1 shift/reduce, 3 reduce/reduce
State 38 conflicts: 12 reduce/reduce
State 43 conflicts: 12 reduce/reduce
State 46 conflicts: 2 shift/reduce, 4 reduce/reduce
State 47 conflicts: 1 shift/reduce, 3 reduce/reduce
State 51 conflicts: 12 reduce/reduce
State 52 conflicts: 1 shift/reduce, 3 reduce/reduce
State 54 conflicts: 5 shift/reduce, 44 reduce/reduce
State 60 conflicts: 5 shift/reduce, 42 reduce/reduce
State 61 conflicts: 2 shift/reduce, 5 reduce/reduce
State 62 conflicts: 5 shift/reduce, 44 reduce/reduce
State 63 conflicts: 1 shift/reduce, 3 reduce/reduce
State 66 conflicts: 2 shift/reduce, 4 reduce/reduce


Grammar

    0 $accept: compilation_unit $end

    1 compilation_unit: %empty
    2                 | func EOL
    3                 | stmt

    4 func: %empty
    5     | identifier identifier '(' params ')' block

    6 params: %empty
    7       | param ',' params
    8       | param

    9 param: %empty
   10      | identifier identifier

   11 block: %empty
   12      | variables stmts block
   13      | '{' variables stmts block '}'

   14 variables: %empty
   15          | variable ';' variables

   16 variable: %empty
   17         | identifier identifier

   18 stmts: %empty
   19      | stmt stmts

   20 stmt: %empty
   21     | then
   22     | IF con then
   23     | IF con then EOL
   24     | IF con then ELSE else_body EOL

   25 con: %empty
   26    | expr

   27 then: %empty
   28     | expr ';' then
   29     | '{' expr ';' '}'

   30 else_body: %empty
   31          | expr ';' else_body
   32          | '{' expr ';' '}'

   33 expr: %empty
   34     | expr '+' expr
   35     | expr '-' expr
   36     | expr '*' expr
   37     | expr '/' expr
   38     | expr '=' expr
   39     | '(' expr ')'
   40     | identifier
   41     | number

   42 identifier: %empty
   43           | IDENTIFIER

   44 number: %empty
   45       | NUMBER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 5 39
    ')' (41) 5 39
    '*' (42) 36
    '+' (43) 34
    ',' (44) 7
    '-' (45) 35
    '/' (47) 37
    ';' (59) 15 28 29 31 32
    '=' (61) 38
    '{' (123) 13 29 32
    '}' (125) 13 29 32
    error (256)
    NUMBER <intval> (258) 45
    ADD <strval> (259)
    SUB <strval> (260)
    MUL <strval> (261)
    DIV <strval> (262)
    ABS <strval> (263)
    EOL <strval> (264) 2 23 24
    OP (265)
    CP (266)
    IF <strval> (267) 22 23 24
    ELSE <strval> (268) 24
    COMMENT (269)
    IDENTIFIER <strval> (270) 43


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    compilation_unit <node> (28)
        on left: 1 2 3
        on right: 0
    func <node> (29)
        on left: 4 5
        on right: 2
    params <pn> (30)
        on left: 6 7 8
        on right: 5 7
    param <node> (31)
        on left: 9 10
        on right: 7 8
    block <node> (32)
        on left: 11 12 13
        on right: 5 12 13
    variables <fvn> (33)
        on left: 14 15
        on right: 12 13 15
    variable <node> (34)
        on left: 16 17
        on right: 15
    stmts <fsn> (35)
        on left: 18 19
        on right: 12 13 19
    stmt <node> (36)
        on left: 20 21 22 23 24
        on right: 3 19
    con <node> (37)
        on left: 25 26
        on right: 22 23 24
    then <node> (38)
        on left: 27 28 29
        on right: 21 22 23 24 28
    else_body <node> (39)
        on left: 30 31 32
        on right: 24 31
    expr <node> (40)
        on left: 33 34 35 36 37 38 39 40 41
        on right: 26 28 29 31 32 34 35 36 37 38 39
    identifier <node> (41)
        on left: 42 43
        on right: 5 10 17 40
    number <node> (42)
        on left: 44 45
        on right: 41


State 0

    0 $accept: • compilation_unit $end

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    $end        reduce using rule 1 (compilation_unit)
    $end        [reduce using rule 20 (stmt)]
    $end        [reduce using rule 27 (then)]
    EOL         reduce using rule 4 (func)
    IDENTIFIER  [reduce using rule 42 (identifier)]
    '('         [reduce using rule 42 (identifier)]
    ';'         reduce using rule 33 (expr)
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 33 (expr)
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 33 (expr)
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 33 (expr)
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 33 (expr)
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 33 (expr)
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 33 (expr)

    compilation_unit  go to state 6
    func              go to state 7
    stmt              go to state 8
    then              go to state 9
    expr              go to state 10
    identifier        go to state 11
    number            go to state 12


State 1

   45 number: NUMBER •

    $default  reduce using rule 45 (number)


State 2

   22 stmt: IF • con then
   23     | IF • con then EOL
   24     | IF • con then ELSE else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 25 (con)
    $end        [reduce using rule 33 (expr)]
    $end        [reduce using rule 42 (identifier)]
    $end        [reduce using rule 44 (number)]
    NUMBER      [reduce using rule 25 (con)]
    NUMBER      [reduce using rule 33 (expr)]
    NUMBER      [reduce using rule 42 (identifier)]
    NUMBER      [reduce using rule 44 (number)]
    EOL         reduce using rule 25 (con)
    EOL         [reduce using rule 33 (expr)]
    EOL         [reduce using rule 42 (identifier)]
    EOL         [reduce using rule 44 (number)]
    IF          reduce using rule 25 (con)
    IF          [reduce using rule 33 (expr)]
    IF          [reduce using rule 42 (identifier)]
    IF          [reduce using rule 44 (number)]
    ELSE        reduce using rule 25 (con)
    ELSE        [reduce using rule 33 (expr)]
    ELSE        [reduce using rule 42 (identifier)]
    ELSE        [reduce using rule 44 (number)]
    IDENTIFIER  [reduce using rule 25 (con)]
    IDENTIFIER  [reduce using rule 33 (expr)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    IDENTIFIER  [reduce using rule 44 (number)]
    '('         [reduce using rule 25 (con)]
    '('         [reduce using rule 33 (expr)]
    '('         [reduce using rule 42 (identifier)]
    '('         [reduce using rule 44 (number)]
    '{'         reduce using rule 25 (con)
    '{'         [reduce using rule 33 (expr)]
    '{'         [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 44 (number)]
    '}'         reduce using rule 25 (con)
    '}'         [reduce using rule 33 (expr)]
    '}'         [reduce using rule 42 (identifier)]
    '}'         [reduce using rule 44 (number)]
    ';'         reduce using rule 25 (con)
    ';'         [reduce using rule 33 (expr)]
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 25 (con)
    '+'         [reduce using rule 33 (expr)]
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 25 (con)
    '-'         [reduce using rule 33 (expr)]
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 25 (con)
    '*'         [reduce using rule 33 (expr)]
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 25 (con)
    '/'         [reduce using rule 33 (expr)]
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 25 (con)
    '='         [reduce using rule 33 (expr)]
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 25 (con)

    con         go to state 13
    expr        go to state 14
    identifier  go to state 15
    number      go to state 12


State 3

   43 identifier: IDENTIFIER •

    $default  reduce using rule 43 (identifier)


State 4

   39 expr: '(' • expr ')'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    ')'       reduce using rule 33 (expr)
    ')'       [reduce using rule 42 (identifier)]
    ')'       [reduce using rule 44 (number)]
    '+'       reduce using rule 33 (expr)
    '+'       [reduce using rule 42 (identifier)]
    '+'       [reduce using rule 44 (number)]
    '-'       reduce using rule 33 (expr)
    '-'       [reduce using rule 42 (identifier)]
    '-'       [reduce using rule 44 (number)]
    '*'       reduce using rule 33 (expr)
    '*'       [reduce using rule 42 (identifier)]
    '*'       [reduce using rule 44 (number)]
    '/'       reduce using rule 33 (expr)
    '/'       [reduce using rule 42 (identifier)]
    '/'       [reduce using rule 44 (number)]
    '='       reduce using rule 33 (expr)
    '='       [reduce using rule 42 (identifier)]
    '='       [reduce using rule 44 (number)]
    $default  reduce using rule 33 (expr)

    expr        go to state 16
    identifier  go to state 15
    number      go to state 12


State 5

   29 then: '{' • expr ';' '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    ';'       reduce using rule 33 (expr)
    ';'       [reduce using rule 42 (identifier)]
    ';'       [reduce using rule 44 (number)]
    '+'       reduce using rule 33 (expr)
    '+'       [reduce using rule 42 (identifier)]
    '+'       [reduce using rule 44 (number)]
    '-'       reduce using rule 33 (expr)
    '-'       [reduce using rule 42 (identifier)]
    '-'       [reduce using rule 44 (number)]
    '*'       reduce using rule 33 (expr)
    '*'       [reduce using rule 42 (identifier)]
    '*'       [reduce using rule 44 (number)]
    '/'       reduce using rule 33 (expr)
    '/'       [reduce using rule 42 (identifier)]
    '/'       [reduce using rule 44 (number)]
    '='       reduce using rule 33 (expr)
    '='       [reduce using rule 42 (identifier)]
    '='       [reduce using rule 44 (number)]
    $default  reduce using rule 33 (expr)

    expr        go to state 17
    identifier  go to state 15
    number      go to state 12


State 6

    0 $accept: compilation_unit • $end

    $end  shift, and go to state 18


State 7

    2 compilation_unit: func • EOL

    EOL  shift, and go to state 19


State 8

    3 compilation_unit: stmt •

    $default  reduce using rule 3 (compilation_unit)


State 9

   21 stmt: then •

    $default  reduce using rule 21 (stmt)


State 10

   28 then: expr • ';' then
   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    ';'  shift, and go to state 20
    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25


State 11

    5 func: identifier • identifier '(' params ')' block
   40 expr: identifier •

    IDENTIFIER  shift, and go to state 3

    '('       reduce using rule 42 (identifier)
    $default  reduce using rule 40 (expr)

    identifier  go to state 26


State 12

   41 expr: number •

    $default  reduce using rule 41 (expr)


State 13

   22 stmt: IF con • then
   23     | IF con • then EOL
   24     | IF con • then ELSE else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 27 (then)]
    IDENTIFIER  [reduce using rule 27 (then)]
    '('         [reduce using rule 27 (then)]
    '{'         [reduce using rule 27 (then)]
    ';'         reduce using rule 27 (then)
    ';'         [reduce using rule 33 (expr)]
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 27 (then)
    '+'         [reduce using rule 33 (expr)]
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 27 (then)
    '-'         [reduce using rule 33 (expr)]
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 27 (then)
    '*'         [reduce using rule 33 (expr)]
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 27 (then)
    '/'         [reduce using rule 33 (expr)]
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 27 (then)
    '='         [reduce using rule 33 (expr)]
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 27 (then)

    then        go to state 27
    expr        go to state 10
    identifier  go to state 15
    number      go to state 12


State 14

   26 con: expr •
   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25

    '+'       [reduce using rule 26 (con)]
    '-'       [reduce using rule 26 (con)]
    '*'       [reduce using rule 26 (con)]
    '/'       [reduce using rule 26 (con)]
    '='       [reduce using rule 26 (con)]
    $default  reduce using rule 26 (con)


State 15

   40 expr: identifier •

    $default  reduce using rule 40 (expr)


State 16

   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr
   39     | '(' expr • ')'

    ')'  shift, and go to state 28
    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25


State 17

   29 then: '{' expr • ';' '}'
   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    ';'  shift, and go to state 29
    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25


State 18

    0 $accept: compilation_unit $end •

    $default  accept


State 19

    2 compilation_unit: func EOL •

    $default  reduce using rule 2 (compilation_unit)


State 20

   28 then: expr ';' • then

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 27 (then)]
    IDENTIFIER  [reduce using rule 27 (then)]
    '('         [reduce using rule 27 (then)]
    '{'         [reduce using rule 27 (then)]
    ';'         reduce using rule 27 (then)
    ';'         [reduce using rule 33 (expr)]
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 27 (then)
    '+'         [reduce using rule 33 (expr)]
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 27 (then)
    '-'         [reduce using rule 33 (expr)]
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 27 (then)
    '*'         [reduce using rule 33 (expr)]
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 27 (then)
    '/'         [reduce using rule 33 (expr)]
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 27 (then)
    '='         [reduce using rule 33 (expr)]
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 27 (then)

    then        go to state 30
    expr        go to state 10
    identifier  go to state 15
    number      go to state 12


State 21

   34 expr: expr '+' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 33 (expr)
    $end        [reduce using rule 42 (identifier)]
    $end        [reduce using rule 44 (number)]
    NUMBER      [reduce using rule 33 (expr)]
    NUMBER      [reduce using rule 42 (identifier)]
    NUMBER      [reduce using rule 44 (number)]
    EOL         reduce using rule 33 (expr)
    EOL         [reduce using rule 42 (identifier)]
    EOL         [reduce using rule 44 (number)]
    IF          reduce using rule 33 (expr)
    IF          [reduce using rule 42 (identifier)]
    IF          [reduce using rule 44 (number)]
    ELSE        reduce using rule 33 (expr)
    ELSE        [reduce using rule 42 (identifier)]
    ELSE        [reduce using rule 44 (number)]
    IDENTIFIER  [reduce using rule 33 (expr)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    IDENTIFIER  [reduce using rule 44 (number)]
    '('         [reduce using rule 33 (expr)]
    '('         [reduce using rule 42 (identifier)]
    '('         [reduce using rule 44 (number)]
    ')'         reduce using rule 33 (expr)
    ')'         [reduce using rule 42 (identifier)]
    ')'         [reduce using rule 44 (number)]
    '{'         reduce using rule 33 (expr)
    '{'         [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 44 (number)]
    '}'         reduce using rule 33 (expr)
    '}'         [reduce using rule 42 (identifier)]
    '}'         [reduce using rule 44 (number)]
    ';'         reduce using rule 33 (expr)
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 33 (expr)
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 33 (expr)
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 33 (expr)
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 33 (expr)
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 33 (expr)
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 33 (expr)

    expr        go to state 31
    identifier  go to state 15
    number      go to state 12


State 22

   35 expr: expr '-' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 33 (expr)
    $end        [reduce using rule 42 (identifier)]
    $end        [reduce using rule 44 (number)]
    NUMBER      [reduce using rule 33 (expr)]
    NUMBER      [reduce using rule 42 (identifier)]
    NUMBER      [reduce using rule 44 (number)]
    EOL         reduce using rule 33 (expr)
    EOL         [reduce using rule 42 (identifier)]
    EOL         [reduce using rule 44 (number)]
    IF          reduce using rule 33 (expr)
    IF          [reduce using rule 42 (identifier)]
    IF          [reduce using rule 44 (number)]
    ELSE        reduce using rule 33 (expr)
    ELSE        [reduce using rule 42 (identifier)]
    ELSE        [reduce using rule 44 (number)]
    IDENTIFIER  [reduce using rule 33 (expr)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    IDENTIFIER  [reduce using rule 44 (number)]
    '('         [reduce using rule 33 (expr)]
    '('         [reduce using rule 42 (identifier)]
    '('         [reduce using rule 44 (number)]
    ')'         reduce using rule 33 (expr)
    ')'         [reduce using rule 42 (identifier)]
    ')'         [reduce using rule 44 (number)]
    '{'         reduce using rule 33 (expr)
    '{'         [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 44 (number)]
    '}'         reduce using rule 33 (expr)
    '}'         [reduce using rule 42 (identifier)]
    '}'         [reduce using rule 44 (number)]
    ';'         reduce using rule 33 (expr)
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 33 (expr)
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 33 (expr)
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 33 (expr)
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 33 (expr)
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 33 (expr)
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 33 (expr)

    expr        go to state 32
    identifier  go to state 15
    number      go to state 12


State 23

   36 expr: expr '*' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 33 (expr)
    $end        [reduce using rule 42 (identifier)]
    $end        [reduce using rule 44 (number)]
    NUMBER      [reduce using rule 33 (expr)]
    NUMBER      [reduce using rule 42 (identifier)]
    NUMBER      [reduce using rule 44 (number)]
    EOL         reduce using rule 33 (expr)
    EOL         [reduce using rule 42 (identifier)]
    EOL         [reduce using rule 44 (number)]
    IF          reduce using rule 33 (expr)
    IF          [reduce using rule 42 (identifier)]
    IF          [reduce using rule 44 (number)]
    ELSE        reduce using rule 33 (expr)
    ELSE        [reduce using rule 42 (identifier)]
    ELSE        [reduce using rule 44 (number)]
    IDENTIFIER  [reduce using rule 33 (expr)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    IDENTIFIER  [reduce using rule 44 (number)]
    '('         [reduce using rule 33 (expr)]
    '('         [reduce using rule 42 (identifier)]
    '('         [reduce using rule 44 (number)]
    ')'         reduce using rule 33 (expr)
    ')'         [reduce using rule 42 (identifier)]
    ')'         [reduce using rule 44 (number)]
    '{'         reduce using rule 33 (expr)
    '{'         [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 44 (number)]
    '}'         reduce using rule 33 (expr)
    '}'         [reduce using rule 42 (identifier)]
    '}'         [reduce using rule 44 (number)]
    ';'         reduce using rule 33 (expr)
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 33 (expr)
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 33 (expr)
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 33 (expr)
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 33 (expr)
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 33 (expr)
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 33 (expr)

    expr        go to state 33
    identifier  go to state 15
    number      go to state 12


State 24

   37 expr: expr '/' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 33 (expr)
    $end        [reduce using rule 42 (identifier)]
    $end        [reduce using rule 44 (number)]
    NUMBER      [reduce using rule 33 (expr)]
    NUMBER      [reduce using rule 42 (identifier)]
    NUMBER      [reduce using rule 44 (number)]
    EOL         reduce using rule 33 (expr)
    EOL         [reduce using rule 42 (identifier)]
    EOL         [reduce using rule 44 (number)]
    IF          reduce using rule 33 (expr)
    IF          [reduce using rule 42 (identifier)]
    IF          [reduce using rule 44 (number)]
    ELSE        reduce using rule 33 (expr)
    ELSE        [reduce using rule 42 (identifier)]
    ELSE        [reduce using rule 44 (number)]
    IDENTIFIER  [reduce using rule 33 (expr)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    IDENTIFIER  [reduce using rule 44 (number)]
    '('         [reduce using rule 33 (expr)]
    '('         [reduce using rule 42 (identifier)]
    '('         [reduce using rule 44 (number)]
    ')'         reduce using rule 33 (expr)
    ')'         [reduce using rule 42 (identifier)]
    ')'         [reduce using rule 44 (number)]
    '{'         reduce using rule 33 (expr)
    '{'         [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 44 (number)]
    '}'         reduce using rule 33 (expr)
    '}'         [reduce using rule 42 (identifier)]
    '}'         [reduce using rule 44 (number)]
    ';'         reduce using rule 33 (expr)
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 33 (expr)
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 33 (expr)
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 33 (expr)
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 33 (expr)
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 33 (expr)
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 33 (expr)

    expr        go to state 34
    identifier  go to state 15
    number      go to state 12


State 25

   38 expr: expr '=' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    $end        reduce using rule 33 (expr)
    $end        [reduce using rule 42 (identifier)]
    $end        [reduce using rule 44 (number)]
    NUMBER      [reduce using rule 33 (expr)]
    NUMBER      [reduce using rule 42 (identifier)]
    NUMBER      [reduce using rule 44 (number)]
    EOL         reduce using rule 33 (expr)
    EOL         [reduce using rule 42 (identifier)]
    EOL         [reduce using rule 44 (number)]
    IF          reduce using rule 33 (expr)
    IF          [reduce using rule 42 (identifier)]
    IF          [reduce using rule 44 (number)]
    ELSE        reduce using rule 33 (expr)
    ELSE        [reduce using rule 42 (identifier)]
    ELSE        [reduce using rule 44 (number)]
    IDENTIFIER  [reduce using rule 33 (expr)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    IDENTIFIER  [reduce using rule 44 (number)]
    '('         [reduce using rule 33 (expr)]
    '('         [reduce using rule 42 (identifier)]
    '('         [reduce using rule 44 (number)]
    ')'         reduce using rule 33 (expr)
    ')'         [reduce using rule 42 (identifier)]
    ')'         [reduce using rule 44 (number)]
    '{'         reduce using rule 33 (expr)
    '{'         [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 44 (number)]
    '}'         reduce using rule 33 (expr)
    '}'         [reduce using rule 42 (identifier)]
    '}'         [reduce using rule 44 (number)]
    ';'         reduce using rule 33 (expr)
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 33 (expr)
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 33 (expr)
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 33 (expr)
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 33 (expr)
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 33 (expr)
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 33 (expr)

    expr        go to state 35
    identifier  go to state 15
    number      go to state 12


State 26

    5 func: identifier identifier • '(' params ')' block

    '('  shift, and go to state 36


State 27

   22 stmt: IF con then •
   23     | IF con then • EOL
   24     | IF con then • ELSE else_body EOL

    EOL   shift, and go to state 37
    ELSE  shift, and go to state 38

    EOL       [reduce using rule 22 (stmt)]
    $default  reduce using rule 22 (stmt)


State 28

   39 expr: '(' expr ')' •

    $default  reduce using rule 39 (expr)


State 29

   29 then: '{' expr ';' • '}'

    '}'  shift, and go to state 39


State 30

   28 then: expr ';' then •

    $default  reduce using rule 28 (then)


State 31

   34 expr: expr • '+' expr
   34     | expr '+' expr •
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25

    '+'       [reduce using rule 34 (expr)]
    '-'       [reduce using rule 34 (expr)]
    '*'       [reduce using rule 34 (expr)]
    '/'       [reduce using rule 34 (expr)]
    '='       [reduce using rule 34 (expr)]
    $default  reduce using rule 34 (expr)


State 32

   34 expr: expr • '+' expr
   35     | expr • '-' expr
   35     | expr '-' expr •
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25

    '+'       [reduce using rule 35 (expr)]
    '-'       [reduce using rule 35 (expr)]
    '*'       [reduce using rule 35 (expr)]
    '/'       [reduce using rule 35 (expr)]
    '='       [reduce using rule 35 (expr)]
    $default  reduce using rule 35 (expr)


State 33

   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   36     | expr '*' expr •
   37     | expr • '/' expr
   38     | expr • '=' expr

    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25

    '+'       [reduce using rule 36 (expr)]
    '-'       [reduce using rule 36 (expr)]
    '*'       [reduce using rule 36 (expr)]
    '/'       [reduce using rule 36 (expr)]
    '='       [reduce using rule 36 (expr)]
    $default  reduce using rule 36 (expr)


State 34

   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   37     | expr '/' expr •
   38     | expr • '=' expr

    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25

    '+'       [reduce using rule 37 (expr)]
    '-'       [reduce using rule 37 (expr)]
    '*'       [reduce using rule 37 (expr)]
    '/'       [reduce using rule 37 (expr)]
    '='       [reduce using rule 37 (expr)]
    $default  reduce using rule 37 (expr)


State 35

   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr
   38     | expr '=' expr •

    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25

    '+'       [reduce using rule 38 (expr)]
    '-'       [reduce using rule 38 (expr)]
    '*'       [reduce using rule 38 (expr)]
    '/'       [reduce using rule 38 (expr)]
    '='       [reduce using rule 38 (expr)]
    $default  reduce using rule 38 (expr)


State 36

    5 func: identifier identifier '(' • params ')' block

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 42 (identifier)]
    ')'         reduce using rule 6 (params)
    ')'         [reduce using rule 9 (param)]
    ')'         [reduce using rule 42 (identifier)]
    ','         reduce using rule 9 (param)
    ','         [reduce using rule 42 (identifier)]
    $default    reduce using rule 6 (params)

    params      go to state 40
    param       go to state 41
    identifier  go to state 42


State 37

   23 stmt: IF con then EOL •

    $default  reduce using rule 23 (stmt)


State 38

   24 stmt: IF con then ELSE • else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 43

    EOL       reduce using rule 30 (else_body)
    ';'       reduce using rule 33 (expr)
    ';'       [reduce using rule 42 (identifier)]
    ';'       [reduce using rule 44 (number)]
    '+'       reduce using rule 33 (expr)
    '+'       [reduce using rule 42 (identifier)]
    '+'       [reduce using rule 44 (number)]
    '-'       reduce using rule 33 (expr)
    '-'       [reduce using rule 42 (identifier)]
    '-'       [reduce using rule 44 (number)]
    '*'       reduce using rule 33 (expr)
    '*'       [reduce using rule 42 (identifier)]
    '*'       [reduce using rule 44 (number)]
    '/'       reduce using rule 33 (expr)
    '/'       [reduce using rule 42 (identifier)]
    '/'       [reduce using rule 44 (number)]
    '='       reduce using rule 33 (expr)
    '='       [reduce using rule 42 (identifier)]
    '='       [reduce using rule 44 (number)]
    $default  reduce using rule 33 (expr)

    else_body   go to state 44
    expr        go to state 45
    identifier  go to state 15
    number      go to state 12


State 39

   29 then: '{' expr ';' '}' •

    $default  reduce using rule 29 (then)


State 40

    5 func: identifier identifier '(' params • ')' block

    ')'  shift, and go to state 46


State 41

    7 params: param • ',' params
    8       | param •

    ','  shift, and go to state 47

    $default  reduce using rule 8 (params)


State 42

   10 param: identifier • identifier

    IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 42 (identifier)

    identifier  go to state 48


State 43

   32 else_body: '{' • expr ';' '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4

    ';'       reduce using rule 33 (expr)
    ';'       [reduce using rule 42 (identifier)]
    ';'       [reduce using rule 44 (number)]
    '+'       reduce using rule 33 (expr)
    '+'       [reduce using rule 42 (identifier)]
    '+'       [reduce using rule 44 (number)]
    '-'       reduce using rule 33 (expr)
    '-'       [reduce using rule 42 (identifier)]
    '-'       [reduce using rule 44 (number)]
    '*'       reduce using rule 33 (expr)
    '*'       [reduce using rule 42 (identifier)]
    '*'       [reduce using rule 44 (number)]
    '/'       reduce using rule 33 (expr)
    '/'       [reduce using rule 42 (identifier)]
    '/'       [reduce using rule 44 (number)]
    '='       reduce using rule 33 (expr)
    '='       [reduce using rule 42 (identifier)]
    '='       [reduce using rule 44 (number)]
    $default  reduce using rule 33 (expr)

    expr        go to state 49
    identifier  go to state 15
    number      go to state 12


State 44

   24 stmt: IF con then ELSE else_body • EOL

    EOL  shift, and go to state 50


State 45

   31 else_body: expr • ';' else_body
   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    ';'  shift, and go to state 51
    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25


State 46

    5 func: identifier identifier '(' params ')' • block

    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 52

    EOL         reduce using rule 11 (block)
    EOL         [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 14 (variables)]
    ';'         reduce using rule 14 (variables)
    ';'         [reduce using rule 16 (variable)]
    ';'         [reduce using rule 42 (identifier)]
    $default    reduce using rule 14 (variables)

    block       go to state 53
    variables   go to state 54
    variable    go to state 55
    identifier  go to state 56


State 47

    7 params: param ',' • params

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 42 (identifier)]
    ')'         reduce using rule 6 (params)
    ')'         [reduce using rule 9 (param)]
    ')'         [reduce using rule 42 (identifier)]
    ','         reduce using rule 9 (param)
    ','         [reduce using rule 42 (identifier)]
    $default    reduce using rule 6 (params)

    params      go to state 57
    param       go to state 41
    identifier  go to state 42


State 48

   10 param: identifier identifier •

    $default  reduce using rule 10 (param)


State 49

   32 else_body: '{' expr • ';' '}'
   34 expr: expr • '+' expr
   35     | expr • '-' expr
   36     | expr • '*' expr
   37     | expr • '/' expr
   38     | expr • '=' expr

    ';'  shift, and go to state 58
    '+'  shift, and go to state 21
    '-'  shift, and go to state 22
    '*'  shift, and go to state 23
    '/'  shift, and go to state 24
    '='  shift, and go to state 25


State 50

   24 stmt: IF con then ELSE else_body EOL •

    $default  reduce using rule 24 (stmt)


State 51

   31 else_body: expr ';' • else_body

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 43

    EOL       reduce using rule 30 (else_body)
    ';'       reduce using rule 33 (expr)
    ';'       [reduce using rule 42 (identifier)]
    ';'       [reduce using rule 44 (number)]
    '+'       reduce using rule 33 (expr)
    '+'       [reduce using rule 42 (identifier)]
    '+'       [reduce using rule 44 (number)]
    '-'       reduce using rule 33 (expr)
    '-'       [reduce using rule 42 (identifier)]
    '-'       [reduce using rule 44 (number)]
    '*'       reduce using rule 33 (expr)
    '*'       [reduce using rule 42 (identifier)]
    '*'       [reduce using rule 44 (number)]
    '/'       reduce using rule 33 (expr)
    '/'       [reduce using rule 42 (identifier)]
    '/'       [reduce using rule 44 (number)]
    '='       reduce using rule 33 (expr)
    '='       [reduce using rule 42 (identifier)]
    '='       [reduce using rule 44 (number)]
    $default  reduce using rule 33 (expr)

    else_body   go to state 59
    expr        go to state 45
    identifier  go to state 15
    number      go to state 12


State 52

   13 block: '{' • variables stmts block '}'

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    ';'         reduce using rule 14 (variables)
    ';'         [reduce using rule 16 (variable)]
    ';'         [reduce using rule 42 (identifier)]
    $default    reduce using rule 14 (variables)

    variables   go to state 60
    variable    go to state 55
    identifier  go to state 56


State 53

    5 func: identifier identifier '(' params ')' block •

    $default  reduce using rule 5 (func)


State 54

   12 block: variables • stmts block

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 18 (stmts)]
    NUMBER      [reduce using rule 20 (stmt)]
    NUMBER      [reduce using rule 27 (then)]
    EOL         reduce using rule 18 (stmts)
    EOL         [reduce using rule 20 (stmt)]
    EOL         [reduce using rule 27 (then)]
    IF          [reduce using rule 18 (stmts)]
    IF          [reduce using rule 20 (stmt)]
    IF          [reduce using rule 27 (then)]
    IDENTIFIER  [reduce using rule 18 (stmts)]
    IDENTIFIER  [reduce using rule 20 (stmt)]
    IDENTIFIER  [reduce using rule 27 (then)]
    '('         [reduce using rule 18 (stmts)]
    '('         [reduce using rule 20 (stmt)]
    '('         [reduce using rule 27 (then)]
    '{'         [reduce using rule 18 (stmts)]
    '{'         [reduce using rule 20 (stmt)]
    '{'         [reduce using rule 27 (then)]
    '}'         reduce using rule 18 (stmts)
    '}'         [reduce using rule 20 (stmt)]
    '}'         [reduce using rule 27 (then)]
    ';'         reduce using rule 18 (stmts)
    ';'         [reduce using rule 20 (stmt)]
    ';'         [reduce using rule 27 (then)]
    ';'         [reduce using rule 33 (expr)]
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 18 (stmts)
    '+'         [reduce using rule 20 (stmt)]
    '+'         [reduce using rule 27 (then)]
    '+'         [reduce using rule 33 (expr)]
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 18 (stmts)
    '-'         [reduce using rule 20 (stmt)]
    '-'         [reduce using rule 27 (then)]
    '-'         [reduce using rule 33 (expr)]
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 18 (stmts)
    '*'         [reduce using rule 20 (stmt)]
    '*'         [reduce using rule 27 (then)]
    '*'         [reduce using rule 33 (expr)]
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 18 (stmts)
    '/'         [reduce using rule 20 (stmt)]
    '/'         [reduce using rule 27 (then)]
    '/'         [reduce using rule 33 (expr)]
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 18 (stmts)
    '='         [reduce using rule 20 (stmt)]
    '='         [reduce using rule 27 (then)]
    '='         [reduce using rule 33 (expr)]
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 18 (stmts)

    stmts       go to state 61
    stmt        go to state 62
    then        go to state 9
    expr        go to state 10
    identifier  go to state 15
    number      go to state 12


State 55

   15 variables: variable • ';' variables

    ';'  shift, and go to state 63


State 56

   17 variable: identifier • identifier

    IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 42 (identifier)

    identifier  go to state 64


State 57

    7 params: param ',' params •

    $default  reduce using rule 7 (params)


State 58

   32 else_body: '{' expr ';' • '}'

    '}'  shift, and go to state 65


State 59

   31 else_body: expr ';' else_body •

    $default  reduce using rule 31 (else_body)


State 60

   13 block: '{' variables • stmts block '}'

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 18 (stmts)]
    NUMBER      [reduce using rule 20 (stmt)]
    NUMBER      [reduce using rule 27 (then)]
    IF          [reduce using rule 18 (stmts)]
    IF          [reduce using rule 20 (stmt)]
    IF          [reduce using rule 27 (then)]
    IDENTIFIER  [reduce using rule 18 (stmts)]
    IDENTIFIER  [reduce using rule 20 (stmt)]
    IDENTIFIER  [reduce using rule 27 (then)]
    '('         [reduce using rule 18 (stmts)]
    '('         [reduce using rule 20 (stmt)]
    '('         [reduce using rule 27 (then)]
    '{'         [reduce using rule 18 (stmts)]
    '{'         [reduce using rule 20 (stmt)]
    '{'         [reduce using rule 27 (then)]
    '}'         reduce using rule 18 (stmts)
    '}'         [reduce using rule 20 (stmt)]
    '}'         [reduce using rule 27 (then)]
    ';'         reduce using rule 18 (stmts)
    ';'         [reduce using rule 20 (stmt)]
    ';'         [reduce using rule 27 (then)]
    ';'         [reduce using rule 33 (expr)]
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 18 (stmts)
    '+'         [reduce using rule 20 (stmt)]
    '+'         [reduce using rule 27 (then)]
    '+'         [reduce using rule 33 (expr)]
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 18 (stmts)
    '-'         [reduce using rule 20 (stmt)]
    '-'         [reduce using rule 27 (then)]
    '-'         [reduce using rule 33 (expr)]
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 18 (stmts)
    '*'         [reduce using rule 20 (stmt)]
    '*'         [reduce using rule 27 (then)]
    '*'         [reduce using rule 33 (expr)]
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 18 (stmts)
    '/'         [reduce using rule 20 (stmt)]
    '/'         [reduce using rule 27 (then)]
    '/'         [reduce using rule 33 (expr)]
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 18 (stmts)
    '='         [reduce using rule 20 (stmt)]
    '='         [reduce using rule 27 (then)]
    '='         [reduce using rule 33 (expr)]
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 18 (stmts)

    stmts       go to state 66
    stmt        go to state 62
    then        go to state 9
    expr        go to state 10
    identifier  go to state 15
    number      go to state 12


State 61

   12 block: variables stmts • block

    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 52

    EOL         reduce using rule 11 (block)
    EOL         [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 14 (variables)]
    '}'         reduce using rule 11 (block)
    '}'         [reduce using rule 14 (variables)]
    ';'         reduce using rule 14 (variables)
    ';'         [reduce using rule 16 (variable)]
    ';'         [reduce using rule 42 (identifier)]
    $default    reduce using rule 14 (variables)

    block       go to state 67
    variables   go to state 54
    variable    go to state 55
    identifier  go to state 56


State 62

   19 stmts: stmt • stmts

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 4
    '{'         shift, and go to state 5

    NUMBER      [reduce using rule 18 (stmts)]
    NUMBER      [reduce using rule 20 (stmt)]
    NUMBER      [reduce using rule 27 (then)]
    EOL         reduce using rule 18 (stmts)
    EOL         [reduce using rule 20 (stmt)]
    EOL         [reduce using rule 27 (then)]
    IF          [reduce using rule 18 (stmts)]
    IF          [reduce using rule 20 (stmt)]
    IF          [reduce using rule 27 (then)]
    IDENTIFIER  [reduce using rule 18 (stmts)]
    IDENTIFIER  [reduce using rule 20 (stmt)]
    IDENTIFIER  [reduce using rule 27 (then)]
    '('         [reduce using rule 18 (stmts)]
    '('         [reduce using rule 20 (stmt)]
    '('         [reduce using rule 27 (then)]
    '{'         [reduce using rule 18 (stmts)]
    '{'         [reduce using rule 20 (stmt)]
    '{'         [reduce using rule 27 (then)]
    '}'         reduce using rule 18 (stmts)
    '}'         [reduce using rule 20 (stmt)]
    '}'         [reduce using rule 27 (then)]
    ';'         reduce using rule 18 (stmts)
    ';'         [reduce using rule 20 (stmt)]
    ';'         [reduce using rule 27 (then)]
    ';'         [reduce using rule 33 (expr)]
    ';'         [reduce using rule 42 (identifier)]
    ';'         [reduce using rule 44 (number)]
    '+'         reduce using rule 18 (stmts)
    '+'         [reduce using rule 20 (stmt)]
    '+'         [reduce using rule 27 (then)]
    '+'         [reduce using rule 33 (expr)]
    '+'         [reduce using rule 42 (identifier)]
    '+'         [reduce using rule 44 (number)]
    '-'         reduce using rule 18 (stmts)
    '-'         [reduce using rule 20 (stmt)]
    '-'         [reduce using rule 27 (then)]
    '-'         [reduce using rule 33 (expr)]
    '-'         [reduce using rule 42 (identifier)]
    '-'         [reduce using rule 44 (number)]
    '*'         reduce using rule 18 (stmts)
    '*'         [reduce using rule 20 (stmt)]
    '*'         [reduce using rule 27 (then)]
    '*'         [reduce using rule 33 (expr)]
    '*'         [reduce using rule 42 (identifier)]
    '*'         [reduce using rule 44 (number)]
    '/'         reduce using rule 18 (stmts)
    '/'         [reduce using rule 20 (stmt)]
    '/'         [reduce using rule 27 (then)]
    '/'         [reduce using rule 33 (expr)]
    '/'         [reduce using rule 42 (identifier)]
    '/'         [reduce using rule 44 (number)]
    '='         reduce using rule 18 (stmts)
    '='         [reduce using rule 20 (stmt)]
    '='         [reduce using rule 27 (then)]
    '='         [reduce using rule 33 (expr)]
    '='         [reduce using rule 42 (identifier)]
    '='         [reduce using rule 44 (number)]
    $default    reduce using rule 18 (stmts)

    stmts       go to state 68
    stmt        go to state 62
    then        go to state 9
    expr        go to state 10
    identifier  go to state 15
    number      go to state 12


State 63

   15 variables: variable ';' • variables

    IDENTIFIER  shift, and go to state 3

    IDENTIFIER  [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    ';'         reduce using rule 14 (variables)
    ';'         [reduce using rule 16 (variable)]
    ';'         [reduce using rule 42 (identifier)]
    $default    reduce using rule 14 (variables)

    variables   go to state 69
    variable    go to state 55
    identifier  go to state 56


State 64

   17 variable: identifier identifier •

    $default  reduce using rule 17 (variable)


State 65

   32 else_body: '{' expr ';' '}' •

    $default  reduce using rule 32 (else_body)


State 66

   13 block: '{' variables stmts • block '}'

    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 52

    IDENTIFIER  [reduce using rule 14 (variables)]
    IDENTIFIER  [reduce using rule 42 (identifier)]
    '{'         [reduce using rule 14 (variables)]
    '}'         reduce using rule 11 (block)
    '}'         [reduce using rule 14 (variables)]
    ';'         reduce using rule 14 (variables)
    ';'         [reduce using rule 16 (variable)]
    ';'         [reduce using rule 42 (identifier)]
    $default    reduce using rule 14 (variables)

    block       go to state 70
    variables   go to state 54
    variable    go to state 55
    identifier  go to state 56


State 67

   12 block: variables stmts block •

    $default  reduce using rule 12 (block)


State 68

   19 stmts: stmt stmts •

    $default  reduce using rule 19 (stmts)


State 69

   15 variables: variable ';' variables •

    $default  reduce using rule 15 (variables)


State 70

   13 block: '{' variables stmts block • '}'

    '}'  shift, and go to state 71


State 71

   13 block: '{' variables stmts block '}' •

    $default  reduce using rule 13 (block)
