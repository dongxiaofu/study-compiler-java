Nonterminals useless in grammar

    calclist
    factor
    term


Terminals unused in grammar

    ADD
    SUB
    MUL
    DIV
    ABS
    OP
    CP
    COMMENT


Rules useless in parser due to conflicts

    3 stmt: %empty


State 0 conflicts: 2 reduce/reduce
State 2 conflicts: 3 shift/reduce, 12 reduce/reduce
State 11 conflicts: 5 shift/reduce
State 16 conflicts: 3 shift/reduce
State 17 conflicts: 3 shift/reduce
State 18 conflicts: 3 shift/reduce
State 19 conflicts: 3 shift/reduce
State 20 conflicts: 3 shift/reduce
State 25 conflicts: 5 shift/reduce
State 26 conflicts: 5 shift/reduce
State 27 conflicts: 5 shift/reduce
State 28 conflicts: 5 shift/reduce
State 29 conflicts: 5 shift/reduce


Grammar

    0 $accept: compilation_unit $end

    1 compilation_unit: %empty
    2                 | stmt

    3 stmt: %empty
    4     | then
    5     | IF con then EOL
    6     | IF con then ELSE else_body EOL

    7 con: %empty
    8    | expr

    9 then: %empty
   10     | expr ';' then
   11     | '{' expr ';' '}'

   12 else_body: %empty
   13          | expr ';' else_body
   14          | '{' expr ';' '}'

   15 expr: %empty
   16     | expr '+' expr
   17     | expr '-' expr
   18     | expr '*' expr
   19     | expr '/' expr
   20     | expr '=' expr
   21     | '(' expr ')'
   22     | IDENTIFIER
   23     | NUMBER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 21
    ')' (41) 21
    '*' (42) 18
    '+' (43) 16
    '-' (45) 17
    '/' (47) 19
    ';' (59) 10 11 13 14
    '=' (61) 20
    '{' (123) 11 14
    '}' (125) 11 14
    error (256)
    NUMBER <intval> (258) 23
    ADD <strval> (259)
    SUB <strval> (260)
    MUL <strval> (261)
    DIV <strval> (262)
    ABS <strval> (263)
    EOL <strval> (264) 5 6
    OP (265)
    CP (266)
    IF <strval> (267) 5 6
    ELSE <strval> (268) 6
    COMMENT (269)
    IDENTIFIER <strval> (270) 22


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    compilation_unit <node> (27)
        on left: 1 2
        on right: 0
    stmt <node> (28)
        on left: 3 4 5 6
        on right: 2
    con <node> (29)
        on left: 7 8
        on right: 5 6
    then <node> (30)
        on left: 9 10 11
        on right: 4 5 6 10
    else_body <node> (31)
        on left: 12 13 14
        on right: 6 13
    expr <node> (32)
        on left: 15 16 17 18 19 20 21 22 23
        on right: 8 10 11 13 14 16 17 18 19 20 21


State 0

    0 $accept: • compilation_unit $end

    NUMBER      shift, and go to state 1
    IF          shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 4
    '('         shift, and go to state 5

    $end      reduce using rule 1 (compilation_unit)
    $end      [reduce using rule 3 (stmt)]
    $end      [reduce using rule 9 (then)]
    $default  reduce using rule 15 (expr)

    compilation_unit  go to state 6
    stmt              go to state 7
    then              go to state 8
    expr              go to state 9


State 1

   23 expr: NUMBER •

    $default  reduce using rule 23 (expr)


State 2

    5 stmt: IF • con then EOL
    6     | IF • con then ELSE else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    NUMBER      [reduce using rule 7 (con)]
    NUMBER      [reduce using rule 15 (expr)]
    EOL         reduce using rule 7 (con)
    EOL         [reduce using rule 15 (expr)]
    ELSE        reduce using rule 7 (con)
    ELSE        [reduce using rule 15 (expr)]
    IDENTIFIER  [reduce using rule 7 (con)]
    IDENTIFIER  [reduce using rule 15 (expr)]
    ';'         reduce using rule 7 (con)
    ';'         [reduce using rule 15 (expr)]
    '{'         reduce using rule 7 (con)
    '{'         [reduce using rule 15 (expr)]
    '+'         reduce using rule 7 (con)
    '+'         [reduce using rule 15 (expr)]
    '-'         reduce using rule 7 (con)
    '-'         [reduce using rule 15 (expr)]
    '*'         reduce using rule 7 (con)
    '*'         [reduce using rule 15 (expr)]
    '/'         reduce using rule 7 (con)
    '/'         [reduce using rule 15 (expr)]
    '='         reduce using rule 7 (con)
    '='         [reduce using rule 15 (expr)]
    '('         [reduce using rule 7 (con)]
    '('         [reduce using rule 15 (expr)]
    $default    reduce using rule 7 (con)

    con   go to state 10
    expr  go to state 11


State 3

   22 expr: IDENTIFIER •

    $default  reduce using rule 22 (expr)


State 4

   11 then: '{' • expr ';' '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    $default  reduce using rule 15 (expr)

    expr  go to state 12


State 5

   21 expr: '(' • expr ')'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    $default  reduce using rule 15 (expr)

    expr  go to state 13


State 6

    0 $accept: compilation_unit • $end

    $end  shift, and go to state 14


State 7

    2 compilation_unit: stmt •

    $default  reduce using rule 2 (compilation_unit)


State 8

    4 stmt: then •

    $default  reduce using rule 4 (stmt)


State 9

   10 then: expr • ';' then
   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    ';'  shift, and go to state 15
    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20


State 10

    5 stmt: IF con • then EOL
    6     | IF con • then ELSE else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 4
    '('         shift, and go to state 5

    EOL       reduce using rule 9 (then)
    ELSE      reduce using rule 9 (then)
    $default  reduce using rule 15 (expr)

    then  go to state 21
    expr  go to state 9


State 11

    8 con: expr •
   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20

    '+'       [reduce using rule 8 (con)]
    '-'       [reduce using rule 8 (con)]
    '*'       [reduce using rule 8 (con)]
    '/'       [reduce using rule 8 (con)]
    '='       [reduce using rule 8 (con)]
    $default  reduce using rule 8 (con)


State 12

   11 then: '{' expr • ';' '}'
   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    ';'  shift, and go to state 22
    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20


State 13

   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr
   21     | '(' expr • ')'

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20
    ')'  shift, and go to state 23


State 14

    0 $accept: compilation_unit $end •

    $default  accept


State 15

   10 then: expr ';' • then

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 4
    '('         shift, and go to state 5

    $end      reduce using rule 9 (then)
    EOL       reduce using rule 9 (then)
    ELSE      reduce using rule 9 (then)
    $default  reduce using rule 15 (expr)

    then  go to state 24
    expr  go to state 9


State 16

   16 expr: expr '+' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    NUMBER      [reduce using rule 15 (expr)]
    IDENTIFIER  [reduce using rule 15 (expr)]
    '('         [reduce using rule 15 (expr)]
    $default    reduce using rule 15 (expr)

    expr  go to state 25


State 17

   17 expr: expr '-' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    NUMBER      [reduce using rule 15 (expr)]
    IDENTIFIER  [reduce using rule 15 (expr)]
    '('         [reduce using rule 15 (expr)]
    $default    reduce using rule 15 (expr)

    expr  go to state 26


State 18

   18 expr: expr '*' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    NUMBER      [reduce using rule 15 (expr)]
    IDENTIFIER  [reduce using rule 15 (expr)]
    '('         [reduce using rule 15 (expr)]
    $default    reduce using rule 15 (expr)

    expr  go to state 27


State 19

   19 expr: expr '/' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    NUMBER      [reduce using rule 15 (expr)]
    IDENTIFIER  [reduce using rule 15 (expr)]
    '('         [reduce using rule 15 (expr)]
    $default    reduce using rule 15 (expr)

    expr  go to state 28


State 20

   20 expr: expr '=' • expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    NUMBER      [reduce using rule 15 (expr)]
    IDENTIFIER  [reduce using rule 15 (expr)]
    '('         [reduce using rule 15 (expr)]
    $default    reduce using rule 15 (expr)

    expr  go to state 29


State 21

    5 stmt: IF con then • EOL
    6     | IF con then • ELSE else_body EOL

    EOL   shift, and go to state 30
    ELSE  shift, and go to state 31


State 22

   11 then: '{' expr ';' • '}'

    '}'  shift, and go to state 32


State 23

   21 expr: '(' expr ')' •

    $default  reduce using rule 21 (expr)


State 24

   10 then: expr ';' then •

    $default  reduce using rule 10 (then)


State 25

   16 expr: expr • '+' expr
   16     | expr '+' expr •
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20

    '+'       [reduce using rule 16 (expr)]
    '-'       [reduce using rule 16 (expr)]
    '*'       [reduce using rule 16 (expr)]
    '/'       [reduce using rule 16 (expr)]
    '='       [reduce using rule 16 (expr)]
    $default  reduce using rule 16 (expr)


State 26

   16 expr: expr • '+' expr
   17     | expr • '-' expr
   17     | expr '-' expr •
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20

    '+'       [reduce using rule 17 (expr)]
    '-'       [reduce using rule 17 (expr)]
    '*'       [reduce using rule 17 (expr)]
    '/'       [reduce using rule 17 (expr)]
    '='       [reduce using rule 17 (expr)]
    $default  reduce using rule 17 (expr)


State 27

   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   18     | expr '*' expr •
   19     | expr • '/' expr
   20     | expr • '=' expr

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20

    '+'       [reduce using rule 18 (expr)]
    '-'       [reduce using rule 18 (expr)]
    '*'       [reduce using rule 18 (expr)]
    '/'       [reduce using rule 18 (expr)]
    '='       [reduce using rule 18 (expr)]
    $default  reduce using rule 18 (expr)


State 28

   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   19     | expr '/' expr •
   20     | expr • '=' expr

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20

    '+'       [reduce using rule 19 (expr)]
    '-'       [reduce using rule 19 (expr)]
    '*'       [reduce using rule 19 (expr)]
    '/'       [reduce using rule 19 (expr)]
    '='       [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)


State 29

   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr
   20     | expr '=' expr •

    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20

    '+'       [reduce using rule 20 (expr)]
    '-'       [reduce using rule 20 (expr)]
    '*'       [reduce using rule 20 (expr)]
    '/'       [reduce using rule 20 (expr)]
    '='       [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)


State 30

    5 stmt: IF con then EOL •

    $default  reduce using rule 5 (stmt)


State 31

    6 stmt: IF con then ELSE • else_body EOL

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 33
    '('         shift, and go to state 5

    EOL       reduce using rule 12 (else_body)
    $default  reduce using rule 15 (expr)

    else_body  go to state 34
    expr       go to state 35


State 32

   11 then: '{' expr ';' '}' •

    $default  reduce using rule 11 (then)


State 33

   14 else_body: '{' • expr ';' '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '('         shift, and go to state 5

    $default  reduce using rule 15 (expr)

    expr  go to state 36


State 34

    6 stmt: IF con then ELSE else_body • EOL

    EOL  shift, and go to state 37


State 35

   13 else_body: expr • ';' else_body
   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    ';'  shift, and go to state 38
    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20


State 36

   14 else_body: '{' expr • ';' '}'
   16 expr: expr • '+' expr
   17     | expr • '-' expr
   18     | expr • '*' expr
   19     | expr • '/' expr
   20     | expr • '=' expr

    ';'  shift, and go to state 39
    '+'  shift, and go to state 16
    '-'  shift, and go to state 17
    '*'  shift, and go to state 18
    '/'  shift, and go to state 19
    '='  shift, and go to state 20


State 37

    6 stmt: IF con then ELSE else_body EOL •

    $default  reduce using rule 6 (stmt)


State 38

   13 else_body: expr ';' • else_body

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 3
    '{'         shift, and go to state 33
    '('         shift, and go to state 5

    EOL       reduce using rule 12 (else_body)
    $default  reduce using rule 15 (expr)

    else_body  go to state 40
    expr       go to state 35


State 39

   14 else_body: '{' expr ';' • '}'

    '}'  shift, and go to state 41


State 40

   13 else_body: expr ';' else_body •

    $default  reduce using rule 13 (else_body)


State 41

   14 else_body: '{' expr ';' '}' •

    $default  reduce using rule 14 (else_body)
